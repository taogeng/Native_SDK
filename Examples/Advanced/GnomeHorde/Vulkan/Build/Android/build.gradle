import org.apache.tools.ant.taskdefs.condition.Os
	
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.application'

File pvrSdkDir = file("${project.buildDir}/../../../../../../../")

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.powervr.VulkanGnomeHorde"
        minSdkVersion 16
        targetSdkVersion 21
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext{
                ndkArgs=['-j8']
            }

        }
        debug {
            jniDebuggable true
            ext {
                ndkArgs = ['-j8', 'DEBUG=1', 'NDK_DEBUG=1']
            }
        }
    }
    if (System.env.APP_ABI) {
        buildTypes.release.ndkArgs << ' APP_ABI='+System.env.APP_ABI + ''
        buildTypes.debug.ndkArgs << ' APP_ABI='+System.env.APP_ABI + ''
    }
	
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jni.srcDirs= [] //Disable built-in ndk building.
            jniLibs.srcDir 'libs'

        }
    }

//Copy all our asset files into the android assets folder.
//Add to this list files that will need to be read at runtime here: Textures, shaders, text files etc.
FileCollection assetFiles = files(
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/bigMushroom_shadow.pvr",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/bigMushroom_texture.pvr",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/fern.pvr",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/fern_shadow.pvr",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/gnome_shadow.pvr",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/gnome_texture.pvr",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/mushroom_shadow.pvr",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/mushroom_texture.pvr",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/rocks.pvr",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/Vulkan/Object.vsh.spv",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/Vulkan/Shadow.vsh.spv",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/Vulkan/Solid.fsh.spv",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/Vulkan/Shadow.fsh.spv",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/Vulkan/Plant.fsh.spv",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/bigMushroom0.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/bigMushroom_shadow0.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/fern0.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/fern_shadow0.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/gnome0.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/gnome1.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/gnome2.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/gnome3.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/gnome4.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/gnome5.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/gnome6.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/gnome_shadow0.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/mushroom0.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/mushroom1.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/mushroom_shadow0.pod",
"${pvrSdkDir}/Examples/Advanced/GnomeHorde/ProcessedAssets/rocks0.pod",

)

    String ndkBuildCommand = 'ndk-build';

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        ndkBuildCommand = 'ndk-build.cmd'
    }

	//Runs before ndk building tasks
    task copyAssets(type: Copy){
        from assetFiles
        into 'assets'
    }

	//Main tasks for ndk Building of the application. Dependencies will be added to framework projects later
    task ndkBuildDebug(type: Exec, dependsOn:[copyAssets]) {
        executable ndkBuildCommand
		args buildTypes.debug.ndkArgs
    }

    task ndkBuildRelease(type: Exec, dependsOn:[copyAssets]) {
        executable ndkBuildCommand
		args buildTypes.release.ndkArgs
    }

    task ndkBuildClean(type: Exec) {
        executable ndkBuildCommand
		args buildTypes.release.ndkArgs + 'clean'
    }

    //In order to shorten this file a bit, create the NDK Build tasks dynamically for each Framework project.
    // We will be creating a debug and a release task for each PVR Framework project dependency.
	// Otherwise we would need to add 3 tasks per project... (build debug, build release, clean...)

    def ndkDependencies=[
    ["PVRCore", "${pvrSdkDir}/Framework/PVRCore/Build/Android"],
    ["PVRAssets", "${pvrSdkDir}/Framework/PVRAssets/Build/Android"],
    ["PVRPlatformGlue", "${pvrSdkDir}/Framework/PVRPlatformGlue/Vulkan/Build/Android"],
    ["PVRNativeVulkan", "${pvrSdkDir}/Framework/PVRNativeApi/Vulkan/Build/Android"],
    ["PVRVulkan", "${pvrSdkDir}/Framework/PVRApi/Vulkan/Build/Android"],
    ["PVRShell", "${pvrSdkDir}/Framework/PVRShell/Build/Android"],
    ["PVRUIRenderer", "${pvrSdkDir}/Framework/PVRUIRenderer/Build/Android"]
    ]

	//Create and configure a task for each combination of build type (debug/release or clean) and dependency
	//For example, there will be task for ndkBuildPVRAssetsDebug, ndkBuildPVRAssetsRelease, ndkBuildPVRAssetsClean
    android.buildTypes.all{ theBuildType -> //Debug/Release
        ndkDependencies.each() { 
            project -> //The list above ProjectName, ProjectPath
            String projectName = "ndkBuild${project[0]}${theBuildType.name.capitalize()}" //e.g. ndkBuildPVRCoreDebug
            task(projectName, type: Exec) {
                workingDir "${project[1]}"
                executable ndkBuildCommand
                args theBuildType.ext.ndkArgs
            }
            task(projectName + "Clean", type: Exec) { //e.g. ndkBuildPVRCoreClean
                workingDir "${project[1]}"
                executable ndkBuildCommand
                args theBuildType.ext.ndkArgs + 'clean'
            }
            tasks.findByName("ndkBuild${theBuildType.name.capitalize()}").dependsOn projectName
			clean.dependsOn projectName + "Clean"
        }
    }

	    tasks.withType(JavaCompile) {
        theTask ->
            buildTypes.each() { theBuildType ->
                if(theTask.name.contains("compile${theBuildType.name.capitalize()}Java")){
                    theTask.dependsOn "ndkBuild${theBuildType.name.capitalize()}"
                }
            }
    }

	//Copy outputs to the bin/ folder. Less idiomatic, more understandable...
	task copyToBin(type: Copy) {
        from 'build/outputs/apk/'
        into 'bin/'
        include('*.apk')
   }

    assembleRelease {
        doLast() {
            copyToBin.execute()
        }
    }

    clean.dependsOn ndkBuildClean
    clean {
        doLast() {
            delete "assets"
            delete "obj"
            delete "bin"
        }
    }

    tasks.withType(Exec) {
        doFirst {
            println commandLine
        }
    }
    preBuild.dependsOn copyAssets
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
