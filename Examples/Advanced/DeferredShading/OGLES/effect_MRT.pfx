[HEADER]
	VERSION		01.00.00.00
	DESCRIPTION OGLESDeferredShading Effects. Multiple Render Target versions.
	COPYRIGHT	Imagination Technologies
[/HEADER]

///////////////////////////////////////////////////////////////////////////
////                                                                   ////
////            GBUFFER EFFECTS                                        ////
////                                                                   ////
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
////      RenderGBuffer: Effects for tangent-space models(bumpmapped)  ////
///////////////////////////////////////////////////////////////////////////
[EFFECT] 
	NAME 	RenderGBuffer
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix	WORLDVIEWPROJECTION
	UNIFORM uWorldViewMatrix		WORLDVIEW
	UNIFORM uWorldViewIT		 	WORLDVIEWIT
		
	UNIFORM sTexture				TEXTURE0
	UNIFORM sBumpMap				TEXTURE1
	
	// ATTRIBUTES
	ATTRIBUTE inVertex				POSITION
	ATTRIBUTE	inNormal			NORMAL
	ATTRIBUTE	inTexCoord			UV0
	ATTRIBUTE	inTangent			TANGENT
	
	// CUSTOM SEMANTICS
	UNIFORM uFarClipDistance			CUSTOMSEMANTIC_FARCLIPDISTANCE
		
	UNIFORM uSpecularStrength			CUSTOMSEMANTIC_SPECULARSTRENGTH
	UNIFORM uDiffuseColor				CUSTOMSEMANTIC_DIFFUSECOLOUR
		
	// SHADERS
	VERTEXSHADER   GBufferVertexShader
	FRAGMENTSHADER GBufferFragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		GBufferVertexShader

	[GLSL_CODE]
		#version 300 es

		#define VERTEX_ARRAY      0
		#define NORMAL_ARRAY      1
		#define TEXCOORD_ARRAY    2
		#define TANGENT_ARRAY     3
		
		layout(location = VERTEX_ARRAY)   in highp   vec3 inVertex;
		layout(location = NORMAL_ARRAY)   in highp   vec3 inNormal;
		layout(location = TEXCOORD_ARRAY) in mediump vec2 inTexCoord;
		layout(location = TANGENT_ARRAY)  in highp   vec3 inTangent;

		uniform  mat4  uWorldViewProjMatrix; 
		uniform  mat4  uWorldViewMatrix; 
		uniform  mat3  uWorldViewIT; 

		out  mediump  vec2   vTexCoord;
		out  highp    vec3   vNormal;
		out  highp    vec3   vTangent;
		out  highp    vec3   vBinormal;
		out  highp    vec3   vViewPos;

		void main() 
		{
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
	  
			// Transform normal from model space to eye space
			vNormal = uWorldViewIT * inNormal;
			vTangent = uWorldViewIT * inTangent;
			vBinormal = cross(vNormal, vTangent);
	  
			// Pass the vertex position in view space for depth calculations
			vViewPos = (uWorldViewMatrix * vec4(inVertex, 1.0)).xyz;
	
			// Pass the texture coordinates to the fragment shader
			vTexCoord = inTexCoord;				
		}
	[/GLSL_CODE]
[/VERTEXSHADER]
 
[FRAGMENTSHADER] 
	NAME 		GBufferFragmentShader 

	[GLSL_CODE]
		#version 300 es

		uniform  sampler2D  sTexture;
		uniform  sampler2D  sBumpMap;

		uniform  highp float  uFarClipDistance;
		uniform  lowp  float  uSpecularStrength;
		uniform  lowp  vec3   uDiffuseColor;

		in  mediump vec2   vTexCoord;
		in  highp   vec3   vNormal;
		in  highp   vec3   vTangent;
		in  highp   vec3   vBinormal;
		in  highp   vec3   vViewPos;
		
		layout(location = 0) out lowp  vec4  oAlbedo; 
		layout(location = 1) out highp vec3  oNormal; 
		layout(location = 2) out highp vec4  oDepth; 

		void main() 
		{
			// Calculate the albedo
			lowp vec3 albedo = texture(sTexture, vTexCoord).rgb * uDiffuseColor;
			// Pack the specular exponent with the albedo
			oAlbedo = vec4(albedo, uSpecularStrength);

			// Calculate viewspace perturbed normal
			highp vec3 bumpmap = normalize(texture(sBumpMap, vTexCoord).rgb * 2.0 - 1.0);
			highp mat3 tangentSpace = mat3(normalize(vTangent), normalize(vBinormal), normalize(vNormal));	
			highp vec3 normalVS = tangentSpace * bumpmap;		

			// Scale the normal range from [-1,1] to [0, 1] to pack it into the RGB_U8 texture
			oNormal.xyz = normalVS * 0.5 + 0.5;	

			// Pack the depth value into 4 channels 	
			// Pack the depth value into 4 channels 	
			highp float scaledDepth = length(vViewPos) / uFarClipDistance;
			highp vec4 enc = vec4(1.0, 255.0, 65025.0, 160581375.0) * scaledDepth;
			enc = fract(enc);
			enc -= enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0);			
			
			oDepth = enc;
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

///////////////////////////////////////////////////////////////////////////
////                                                                   ////
////      RenderGBufferFloor: Effects for non-bumpmapped models        ////
////                                                                   ////
///////////////////////////////////////////////////////////////////////////
[EFFECT] 
	NAME 	RenderGBufferFloor
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix	WORLDVIEWPROJECTION
	UNIFORM uWorldViewIT		 	WORLDVIEWIT
	UNIFORM uWorldViewMatrix		WORLDVIEW
			
	// ATTRIBUTES
	ATTRIBUTE inVertex				POSITION
	ATTRIBUTE inNormal				NORMAL
	ATTRIBUTE inTexCoord			UV0
		
	// CUSTOM SEMANTICS
	UNIFORM uFarClipDistance			CUSTOMSEMANTIC_FARCLIPDISTANCE
		
	UNIFORM uSpecularStrength				CUSTOMSEMANTIC_SPECULARSTRENGTH
	UNIFORM uDiffuseColor				CUSTOMSEMANTIC_DIFFUSECOLOUR
		
	// SHADERS
	VERTEXSHADER   GBufferFloorVertexShader
	FRAGMENTSHADER GBufferFloorFragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		GBufferFloorVertexShader

	[GLSL_CODE]
		#version 300 es

		#define VERTEX_ARRAY      0
		#define NORMAL_ARRAY      1
		#define TEXCOORD_ARRAY    2
		
		layout(location = VERTEX_ARRAY)   in highp   vec3 inVertex;
		layout(location = NORMAL_ARRAY)   in highp   vec3 inNormal;
		layout(location = TEXCOORD_ARRAY) in mediump vec2 inTexCoord;

		uniform  mat4  uWorldViewProjMatrix; 
		uniform  mat4  uWorldViewMatrix; 
		uniform  mat3  uWorldViewIT; 

		out  mediump  vec2   vTexCoord;
		out  highp    vec3   vNormal;
		out  highp    vec3   vViewPos;

		void main() 
		{
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
	  
			// Transform normal from model space to eye space
			vNormal = uWorldViewIT * inNormal;
	  
			// Pass the vertex position in view space for depth calculations
			vViewPos = (uWorldViewMatrix * vec4(inVertex, 1.0)).xyz;
	
			// Pass the texture coordinates to the fragment shader
			vTexCoord = inTexCoord;	
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER] 
	NAME 		GBufferFloorFragmentShader

	[GLSL_CODE]
		#version 300 es

		uniform  sampler2D  sTexture;
		
		uniform  lowp  float  uSpecularStrength;
		uniform  lowp  vec3   uDiffuseColor;
		uniform  highp float  uFarClipDistance;
		
		in  highp   vec3   vNormal;
		in  highp   vec2   vTexCoord;
		in  highp   vec3   vViewPos;
				
		layout(location = 0) out lowp  vec4  oAlbedo; 
		layout(location = 1) out highp vec3  oNormal; 
		layout(location = 2) out highp vec4  oDepth; 

		void main() 
		{
			// Pack the specular exponent with the albedo
			oAlbedo = vec4(texture(sTexture, vTexCoord).rgb * uDiffuseColor, uSpecularStrength);

			// Pack the normal
			oNormal.xyz = normalize(vNormal) * .5 + .5;

			// Pack the depth value into 4 channels 	
			highp float scaledDepth = length(vViewPos) / uFarClipDistance;
			highp vec4 enc = vec4(1.0, 255.0, 65025.0, 160581375.0) * scaledDepth;
			enc = fract(enc);
			enc -= enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0);			
			
			oDepth = enc;			
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]



///////////////////////////////////////////////////////////////////////////
////                                                                   ////
////                   DEFERRED LIGHT SHADERS                          ////
////                                                                   ////
///////////////////////////////////////////////////////////////////////////

//
// Calculates the lighting for a point light source
//
[EFFECT] 
	NAME 	RenderPointLight
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix		WORLDVIEWPROJECTION
	UNIFORM uWorldViewMatrix			WORLDVIEW
	UNIFORM uLightColorIntensity		LIGHTCOLOR
		
	UNIFORM sAlbedo					TEXTURE0
	UNIFORM sNormals					TEXTURE1
	UNIFORM sDepth					TEXTURE2
	
	// CUSTOM SEMANTICS
	UNIFORM uFarClipDistance			CUSTOMSEMANTIC_FARCLIPDISTANCE
	
	UNIFORM uLightViewPosition		CUSTOMSEMANTIC_POINTLIGHT_VIEWPOSITION
	
	// ATTRIBUTES
	ATTRIBUTE inVertex				POSITION

	// SHADERS	
	VERTEXSHADER   DeferredVertexShader
	FRAGMENTSHADER PointLightFragmentShader
[/EFFECT]



// 
// Vertex shader that is shared amongst (most) deferred light shaders
//
[VERTEXSHADER]
	NAME 		DeferredVertexShader

	[GLSL_CODE]
		#version 300 es

		#define VERTEX_ARRAY      0

		layout(location = VERTEX_ARRAY)   in highp   vec3 inVertex;

		uniform  mat4  uWorldViewProjMatrix;
		uniform  mat4  uWorldViewMatrix;
		
		out  highp   vec3  vPositionVS;
		out  highp   vec3  vViewDirVS;
		out  mediump vec2  vTexCoord;

		void main() 
		{ 	
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
			gl_Position.xyz = gl_Position.xyz / gl_Position.w;
			gl_Position.w = 1.0;
			
			vTexCoord = (gl_Position.xy + 1.0) * 0.5;
	
			// Calculate the view-space position for lighting calculations
			vPositionVS = (uWorldViewMatrix * vec4(inVertex, 1.0)).xyz;

			// Pass the view direction
			vViewDirVS = vPositionVS;
		} 
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER] 
	NAME 		PointLightFragmentShader 

	[GLSL_CODE]
		#version 300 es

		uniform  sampler2D    sAlbedo;
		uniform  sampler2D    sNormals;
		uniform  sampler2D    sDepth;	

		uniform  highp float  uFarClipDistance;
		uniform  highp vec3   uLightColorIntensity;

		uniform  highp mat3   uWorldIT;		
		uniform  highp vec3   uLightViewPosition;
		
		in  highp   vec3  vPositionVS;
		in  highp   vec3  vViewDirVS;
		in  mediump vec2  vTexCoord;

		layout(location = 0) out lowp vec4 oColor;

		void main()
		{
			//
			// Read GBuffer attributes
			//	
			highp vec4 depthTex = texture(sDepth, vTexCoord);
			highp vec4 albedoSpec = texture(sAlbedo, vTexCoord);
			highp vec3 normalTex = texture(sNormals, vTexCoord).xyz;
			
			// reconstruct original depth value
			highp float depth = dot(depthTex, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/160581375.0));

			//
			// Reconstruct common vectors and world space position 
			//
			highp vec3 positionVS = normalize(vPositionVS) * depth * uFarClipDistance;	
			highp vec3 lightDirection = uLightViewPosition - positionVS;
			highp float lightDistance = length(lightDirection);
			lightDirection /= lightDistance;
	
			//
			// Calculate lighting terms
			//
			highp vec3 normal = normalize(normalTex * 2.0 - 1.0);	
			highp float n_dot_l = max(dot(lightDirection, normal), 0.0);	
			highp vec3 diffuse = n_dot_l * albedoSpec.rgb;

			highp vec3 viewDirection = normalize(vViewDirVS);
			highp vec3 reflectedLightDirection = reflect(lightDirection, normal);
			highp float v_dot_r = max(dot(viewDirection, reflectedLightDirection), 0.0);
			diffuse += vec3(pow(v_dot_r, 16.0) * albedoSpec.a);
	
			//Subtracting a small number and clamping makes for a much better falloff look.
			highp float attenuation = max(1. / (1. + 1. * lightDistance * lightDistance) -.001, 0.);
			oColor = vec4(diffuse * uLightColorIntensity * attenuation, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

//
// Calculates the lighting for a directional light source
//
[EFFECT] 
	NAME 	RenderDirectionalLight
		
	// GLOBALS UNIFORMS
	UNIFORM uLightColorIntensity		LIGHTCOLOR
			
	UNIFORM sAlbedo						TEXTURE0
	UNIFORM sNormals					TEXTURE1
		
	// CUSTOM SEMANTICS
	UNIFORM uLightDirection			CUSTOMSEMANTIC_DIRECTIONALLIGHT_DIRECTION

	// SHADERS	
	VERTEXSHADER   DirectionalLightVertexShader
	FRAGMENTSHADER DirectionalLightFragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		DirectionalLightVertexShader

	[GLSL_CODE]
		#version 300 es

		const highp vec2 positions[4]=vec2[4]
		(
			vec2(-1.,-1.),
			vec2( 1.,-1.),
			vec2(-1., 1.),
			vec2( 1., 1.)
		);

		out  mediump vec2  vTexCoord;
		void main() 
		{ 	
			highp vec2 position = positions[gl_VertexID];
			
			gl_Position = vec4(position, 0.5, 1.);
			vTexCoord = position * .5 - .5; //Map -1..1->0..1
		} 
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER] 
	NAME 		DirectionalLightFragmentShader 

	[GLSL_CODE]
		#version 300 es

		uniform  sampler2D  sAlbedo;
		uniform  sampler2D  sNormals;

		uniform highp vec3  uLightColorIntensity;
		uniform  highp vec4  uLightDirection;

		in mediump vec2 vTexCoord;

		layout(location = 0) out lowp vec4 oColor;

		void main()
		{
			// Fetch required gbuffer attributes
			lowp  vec3 albedo = texture(sAlbedo, vTexCoord).rgb;
			highp vec3 normalTex = texture(sNormals, vTexCoord).xyz;
			highp vec3 normal = normalTex.xyz * 2.0 - vec3(1.0);
			
			// Calculate simple diffuse lighting
			highp float n_dot_l = max(dot(-uLightDirection.xyz, normal.xyz), 0.0);
			lowp vec3 color = albedo * (n_dot_l * uLightColorIntensity + vec3(.2, .2, .1));
			
			oColor = vec4(color, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

///////////////////////////////////////////////////////////////////////////
////                                                                   ////
////                   AUXILIARY SHADERS                               ////
////                                                                   ////
///////////////////////////////////////////////////////////////////////////

//
// Renders the geometry using a single color passed as an uniform.
//
[EFFECT] 
	NAME 	RenderSolidColor
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix	WORLDVIEWPROJECTION
	UNIFORM uConstantColor			MATERIALCOLORAMBIENT
	
	// ATTRIBUTES
	ATTRIBUTE	inVertex			POSITION

	// SHADERS	
	VERTEXSHADER   VertexShader
	FRAGMENTSHADER SolidColorFragmentShader
[/EFFECT]


[VERTEXSHADER]
	NAME 		VertexShader

	[GLSL_CODE]
		#version 300 es

		layout(location = 0)   in highp   vec3 inVertex;

		uniform  mat4  uWorldViewProjMatrix; 

		void main() 
		{ 
			// pass-through position and texture coordinates
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
		} 
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER] 
	NAME 		SolidColorFragmentShader 

	[GLSL_CODE]
		#version 300 es

		uniform lowp vec4 uConstantColor;

		layout(location = 0) out lowp vec4 oColor;

		void main()
		{
			oColor = uConstantColor;
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT] 
	NAME 	RenderNullColor
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix	WORLDVIEWPROJECTION
	
	// ATTRIBUTES
	ATTRIBUTE	inVertex			POSITION

	// SHADERS	
	VERTEXSHADER   VertexShader
	FRAGMENTSHADER NullFragmentShader
[/EFFECT]

[FRAGMENTSHADER] 
	NAME 		NullFragmentShader 

	[GLSL_CODE]
		#version 300 es
		void main() { }
	[/GLSL_CODE]
[/FRAGMENTSHADER]
