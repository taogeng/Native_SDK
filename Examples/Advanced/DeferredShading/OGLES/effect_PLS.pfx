[HEADER]
	VERSION		01.00.00.00
	DESCRIPTION OGLESDeferredShading Effects. Pixel Local Storage versions.
	COPYRIGHT	Imagination Technologies
[/HEADER]

///////////////////////////////////////////////////////////////////////////
////                                                                   ////
////                   GBUFFER RENDER                                  ////
////                                                                   ////
///////////////////////////////////////////////////////////////////////////

[EFFECT]
    NAME RenderGBuffer
    // GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix	WORLDVIEWPROJECTION
	UNIFORM uWorldViewMatrix		WORLDVIEW
	UNIFORM uWorldViewIT		 	WORLDVIEWIT
		
	UNIFORM sTexture				TEXTURE0
	UNIFORM sBumpMap				TEXTURE1
	
	// ATTRIBUTES
	ATTRIBUTE	inVertex			POSITION
	ATTRIBUTE	inNormal			NORMAL
	ATTRIBUTE	inTexCoord			UV0
	ATTRIBUTE	inTangent			TANGENT
	
	// CUSTOM SEMANTICS
	UNIFORM uFarClipDistance			CUSTOMSEMANTIC_FARCLIPDISTANCE
		
	UNIFORM uSpecularStrength				CUSTOMSEMANTIC_SPECULARSTRENGTH
	UNIFORM uDiffuseColor				CUSTOMSEMANTIC_DIFFUSECOLOUR
		
	// SHADERS
	VERTEXSHADER   GBufferVertexShader
	FRAGMENTSHADER GBufferFragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		GBufferVertexShader

	[GLSL_CODE]
		#version 300 es

		#define VERTEX_ARRAY      0
		#define NORMAL_ARRAY      1
		#define TEXCOORD_ARRAY    2
		#define TANGENT_ARRAY     3
		
		layout(location = VERTEX_ARRAY)   in highp   vec3 inVertex;
		layout(location = NORMAL_ARRAY)   in highp   vec3 inNormal;
		layout(location = TEXCOORD_ARRAY) in mediump vec2 inTexCoord;
		layout(location = TANGENT_ARRAY)  in highp   vec3 inTangent;

		uniform  mat4  uWorldViewProjMatrix; 
		uniform  mat4  uWorldViewMatrix; 
		uniform  mat3  uWorldViewIT; 

		out  mediump  vec2   vTexCoord;
		out  highp    vec3   vNormal;
		out  highp    vec3   vTangent;
		out  highp    vec3   vBinormal;
		out  highp    vec3   vViewPos;

		void main() 
		{
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
	  
			// Transform normal from model space to eye space
			vNormal = uWorldViewIT * inNormal;
			vTangent = uWorldViewIT * inTangent;
			vBinormal = cross(vNormal, vTangent);
	  
			// Pass the vertex position in view space for depth calculations
			vViewPos = (uWorldViewMatrix * vec4(inVertex, 1.0)).xyz;
	
			// Pass the texture coordinates to the fragment shader
			vTexCoord = inTexCoord;				
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER] 
	NAME 		GBufferFragmentShader

	[GLSL_CODE]
		#version 300 es
        #extension GL_EXT_shader_pixel_local_storage : require

        uniform  sampler2D  sTexture;
        uniform  sampler2D  sBumpMap;

        uniform  highp float  uFarClipDistance;
        uniform  lowp  float  uSpecularStrength;
        uniform  lowp  vec3   uDiffuseColor;

        in highp vec2 vTexCoord;
        in  highp   vec3   vNormal;
        in  highp   vec3   vTangent;
        in  highp   vec3   vBinormal;
        in  highp   vec3   vViewPos;
    
        layout(rgba8) __pixel_local_outEXT FragDataLocal {
            layout(rgba8) highp vec4 oAlbedo;
            layout(rgba8) highp vec4 oNormal; 
            layout(r32f) highp float oDepth;
            layout(rgba8) highp vec4 unused_ColorAccum;
        } gbufout;

        void main() 
        {
            // Calculate the albedo
            lowp vec3 albedo = texture(sTexture, vTexCoord).rgb * uDiffuseColor;
            // Pack the specular exponent with the albedo
            gbufout.oAlbedo = vec4(albedo, uSpecularStrength);
			
            // Calculate viewspace perturbed normal
            highp vec3 bumpmap = normalize(texture(sBumpMap, vTexCoord).rgb * 2.0 - 1.0);
            highp mat3 tangentSpace = mat3(normalize(vTangent), normalize(vBinormal), normalize(vNormal));	
            highp vec3 normalVS = tangentSpace * bumpmap;		

            // Scale the normal range from [-1,1] to [0, 1] to pack it into the RGB_U8 texture
            gbufout.oNormal = vec4(normalVS * 0.5 + 0.5,1.0);
            
            highp float scaledDepth = length(vViewPos) / uFarClipDistance;
			
            gbufout.oDepth = scaledDepth;
        }
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT]
    NAME RenderGBufferFloor
    // GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix	WORLDVIEWPROJECTION
	UNIFORM uWorldViewMatrix		WORLDVIEW
	UNIFORM uWorldViewIT		 	WORLDVIEWIT
		
	UNIFORM sTexture				TEXTURE0
	
	// ATTRIBUTES
	ATTRIBUTE	inVertex			POSITION
	ATTRIBUTE	inNormal			NORMAL
	ATTRIBUTE	inTexCoord			UV0
	
	// CUSTOM SEMANTICS
	UNIFORM uFarClipDistance			CUSTOMSEMANTIC_FARCLIPDISTANCE
		
	UNIFORM uSpecularStrength				CUSTOMSEMANTIC_SPECULARSTRENGTH
	UNIFORM uDiffuseColor				CUSTOMSEMANTIC_DIFFUSECOLOUR
		
	// SHADERS
	VERTEXSHADER   GBufferFloorVertexShader
	FRAGMENTSHADER GBufferFloorFragmentShader
[/EFFECT]


[VERTEXSHADER]
	NAME 		GBufferFloorVertexShader

	[GLSL_CODE]
		#version 300 es

		#define VERTEX_ARRAY      0
		#define NORMAL_ARRAY      1
		#define TEXCOORD_ARRAY    2
		
		layout(location = VERTEX_ARRAY)   in highp   vec3 inVertex;
		layout(location = NORMAL_ARRAY)   in highp   vec3 inNormal;
		layout(location = TEXCOORD_ARRAY) in mediump vec2 inTexCoord;

		uniform  mat4  uWorldViewProjMatrix; 
		uniform  mat3  uWorldViewIT; 
		uniform  mat4  uWorldViewMatrix; 
		
		out  mediump  vec2   vTexCoord;
		out  highp    vec3   vNormal;
		out  highp    vec3   vViewPos;

		void main() 
		{
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
	  
			// Pass the vertex position in view space for depth calculations
			vViewPos = (uWorldViewMatrix * vec4(inVertex, 1.0)).xyz;			

			// Transform normal from model space to eye space
			vNormal = uWorldViewIT * inNormal;

			// Pass the texture coordinates to the fragment shader
			vTexCoord = inTexCoord;	
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER] 
	NAME 		GBufferFloorFragmentShader

	[GLSL_CODE]
		#version 300 es
        #extension GL_EXT_shader_pixel_local_storage : require

        uniform  sampler2D  sTexture;
        uniform  sampler2D  sBumpMap;

        uniform  highp float  uFarClipDistance;
        uniform  lowp  float  uSpecularStrength;
        uniform  lowp  vec3   uDiffuseColor;

        in highp vec2 vTexCoord;
        in  highp   vec3   vNormal;
        in  highp   vec3   vTangent;
        in  highp   vec3   vBinormal;
        in  highp   vec3   vViewPos;
    
        layout(rgba8) __pixel_local_outEXT FragDataLocal {
            layout(rgba8) highp vec4 oAlbedo;
            layout(rgba8) highp vec4 oNormal; 
            layout(r32f) highp float oDepth;
            layout(rgba8) highp vec4 unused_ColorAccum;
        } gbufout;

        void main() 
        {
            // Calculate the albedo
            lowp vec3 albedo = texture(sTexture, vTexCoord).rgb * uDiffuseColor;
            // Pack the specular exponent with the albedo
            gbufout.oAlbedo = vec4(albedo, uSpecularStrength);

            // Scale the normal range from [-1,1] to [0, 1] to pack it into the second PLS comomemt
            gbufout.oNormal = vec4(normalize(vNormal) * .5 + .5, 1.0);
            
            // Pack the depth value into 4 channels 	
            highp float scaledDepth = length(vViewPos) / uFarClipDistance;
			
            gbufout.oDepth = scaledDepth;
        }
	[/GLSL_CODE]
[/FRAGMENTSHADER]
 

///////////////////////////////////////////////////////////////////////////
////                                                                   ////
////                   DEFERRED LIGHT SHADERS                          ////
////                                                                   ////
///////////////////////////////////////////////////////////////////////////

// 
// Vertex shader that is shared amongst (most) deferred light shaders
//
[VERTEXSHADER]
	NAME 		DeferredVertexShader

	[GLSL_CODE]
		#version 300 es

		#define VERTEX_ARRAY      0

		layout(location = VERTEX_ARRAY)   in highp   vec3 inVertex;

		uniform  mat4  uWorldViewProjMatrix;
		uniform  mat4  uWorldViewMatrix;
		
		out  highp   vec3  vPositionVS;
		out  highp   vec3  vViewDirVS;
		out  mediump vec2  vTexCoord;

		void main() 
		{ 	
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
			gl_Position.xyz = gl_Position.xyz / gl_Position.w;
			gl_Position.w = 1.0;
			
			vTexCoord = (gl_Position.xy + 1.0) * 0.5;
	
			// Calculate the view-space position for lighting calculations
			vPositionVS = (uWorldViewMatrix * vec4(inVertex, 1.0)).xyz;

			// Pass the view direction
			vViewDirVS = vPositionVS;
		} 
	[/GLSL_CODE]
[/VERTEXSHADER]

//
// Calculates the lighting for a point light source
//
[EFFECT] 
	NAME 	RenderPointLight
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix		WORLDVIEWPROJECTION
	UNIFORM uWorldViewMatrix			WORLDVIEW
	UNIFORM uLightColorIntensity		LIGHTCOLOR
		
	// CUSTOM SEMANTICS
	UNIFORM uFarClipDistance			CUSTOMSEMANTIC_FARCLIPDISTANCE
	
	UNIFORM uLightViewPosition		CUSTOMSEMANTIC_POINTLIGHT_VIEWPOSITION
	
	// ATTRIBUTES
	ATTRIBUTE inVertex			POSITION

	// SHADERS	
	VERTEXSHADER   DeferredVertexShader
	FRAGMENTSHADER PointLightFragmentShader
[/EFFECT]

[FRAGMENTSHADER] 
	NAME 		PointLightFragmentShader

	[GLSL_CODE]
		#version 300 es

        #extension GL_EXT_shader_pixel_local_storage : require
        
		layout(rgba8) __pixel_localEXT FragDataLocal {
            layout(rgba8) highp vec4 inAlbedo;
            layout(rgba8) highp vec4 inNormal; 
            layout(r32f) highp float inDepth;
            layout(rgba8) highp vec4 inoutColor;
        } pls;
        
        layout(location = 0) out lowp vec4 oColorFbo;
        
		uniform  highp float  uFarClipDistance;
		uniform  highp vec3   uLightColorIntensity;

		uniform  highp vec3   uLightViewPosition;
		
		in  highp   vec3  vPositionVS;
		in  highp   vec3  vViewDirVS;
		in  mediump vec2  vTexCoord;

		void main()
		{		
			//
			// Read GBuffer attributes
			//
            highp vec4 albedoSpec = pls.inAlbedo;
			highp vec3 normalTex =  pls.inNormal.xyz;
			
			// reconstruct original depth value
			highp float depth = pls.inDepth;

			//
			// Reconstruct common vectors and world space position 
			//
			highp vec3 positionVS = normalize(vPositionVS) * depth * uFarClipDistance;	
			highp vec3 lightDirection = uLightViewPosition - positionVS;
			highp float lightDistance = length(lightDirection);
			lightDirection /= lightDistance;
	
			//
			// Calculate lighting terms
			//
			highp vec3 normal = normalize(normalTex * 2.0 - 1.0);	
			highp float n_dot_l = max(dot(lightDirection, normal), 0.0);	
			highp vec3 diffuse = n_dot_l * albedoSpec.rgb;

			highp vec3 viewDirection = normalize(vViewDirVS);
			highp vec3 reflectedLightDirection = reflect(lightDirection, normal);
			highp float v_dot_r = max(dot(viewDirection, reflectedLightDirection), 0.0);
			diffuse += vec3(pow(v_dot_r, 16.0) * albedoSpec.a);
	
			highp float attenuation = max(1. / (1. + 1. * lightDistance * lightDistance) -.001, 0.);
			pls.inoutColor = pls.inoutColor + vec4(diffuse * uLightColorIntensity * attenuation, 1.0);
			
			//oColorFbo = vec4(vec3(1.0, 0.0, 0.0), 1.0);
			//return;
        }
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT] 
	NAME 	RenderDirectionalLight
		
	// GLOBALS UNIFORMS
	UNIFORM uLightColorIntensity		LIGHTCOLOR
		
	// CUSTOM SEMANTICS
	UNIFORM uLightDirection			CUSTOMSEMANTIC_DIRECTIONALLIGHT_DIRECTION
	
	// SHADERS	
	VERTEXSHADER   AttributelessVertexShader
	FRAGMENTSHADER DirectionalLightFragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		AttributelessVertexShader

	[GLSL_CODE]
		#version 300 es

		const highp vec2 positions[4]=vec2[4]
		(
			vec2(-1.,-1.),
			vec2( 1.,-1.),
			vec2(-1., 1.),
			vec2( 1., 1.)
		);

		out  mediump vec2  vTexCoord;
		void main() 
		{ 	
			highp vec2 position = positions[gl_VertexID];
			
			gl_Position = vec4(position, 0.5, 1.);
			vTexCoord = position * .5 - .5; //Map -1..1->0..1
		} 
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER] 
	NAME 		DirectionalLightFragmentShader

	[GLSL_CODE]
		#version 300 es
        #extension GL_EXT_shader_pixel_local_storage : require
        
		layout(rgba8)  __pixel_localEXT FragDataLocal {
            layout(rgba8) highp vec4 inAlbedo;
            layout(rgba8) highp vec4 inNormal; 
            layout(r32f) highp float inDepth;
            layout(rgba8) highp vec4 oColor;
        } pls;
        
        //layout(location = 0) out lowp vec4 oColorFbo;

		uniform highp vec3  uLightColorIntensity;
		uniform  highp vec4  uLightDirection;

		in mediump vec2 vTexCoord;

		void main()
		{
			// Fetch required gbuffer attributes
			lowp  vec3 albedo = pls.inAlbedo.rgb;
			highp vec3 normalTex = pls.inNormal.xyz;
			highp vec3 normal = normalize(normalTex.xyz * 2.0 - 1.0);
			
			// Calculate simple diffuse lighting
			highp float n_dot_l = max(dot(-uLightDirection.xyz, normal.xyz), 0.0);
			lowp vec3 color = albedo * (n_dot_l * uLightColorIntensity + vec3(.2, .2, .1));
			pls.oColor = vec4(color, 1.);
			//oColorFbo = vec4(color, 1.);
			//return;
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]


///////////////////////////////////////////////////////////////////////////
////                                                                   ////
////                   AUXILIARY SHADERS                               ////
////                                                                   ////
///////////////////////////////////////////////////////////////////////////

//
// Renders the geometry using a single color passed as an uniform.
//
[EFFECT] 
	NAME 	RenderSolidColor
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix	WORLDVIEWPROJECTION
	UNIFORM uConstantColor			MATERIALCOLORAMBIENT
	
	// ATTRIBUTES
	ATTRIBUTE	inVertex			POSITION

	// SHADERS	
	VERTEXSHADER   VertexShader
	FRAGMENTSHADER SolidColorFragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		VertexShader

	[GLSL_CODE]
		#version 300 es
		layout(location = 0)   in highp   vec3 inVertex;
		uniform  mat4  uWorldViewProjMatrix; 
		void main() 
		{ 
			// pass-through position and texture coordinates
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
		} 
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER] 
	NAME 		SolidColorFragmentShader 

	[GLSL_CODE]
		#version 300 es
        #extension GL_EXT_shader_pixel_local_storage : require
		
		uniform lowp vec4 uConstantColor;
		
		layout(rgba8)  __pixel_local_outEXT FragDataLocal {
            layout(rgba8) highp vec4 unused_Albedo;
            layout(rgba8) highp vec4 unused_Normal; 
            layout(r32f) highp float unused_Depth; 
            layout(rgba8) highp vec4 oColor;
        } pls;
		
		void main()
		{
			pls.oColor = uConstantColor;
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT] 
	NAME 	RenderNullColor
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix	WORLDVIEWPROJECTION
	
	// ATTRIBUTES
	ATTRIBUTE	inVertex			POSITION

	// SHADERS	
	VERTEXSHADER   VertexShader
	FRAGMENTSHADER NullFragmentShader
[/EFFECT]

[FRAGMENTSHADER] 
	NAME 		NullFragmentShader

	[GLSL_CODE]
		#version 300 es
		void main() { }
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT] 
	NAME 	WriteOutColorFromPls
	// NO ATTRIBUTES / UNIFORMS

	// SHADERS	
	VERTEXSHADER   AttributelessVertexShader
	FRAGMENTSHADER WritePlsToFboFragmentShader
[/EFFECT]

[FRAGMENTSHADER] 
	NAME 		WritePlsToFboFragmentShader

	[GLSL_CODE]
		#version 300 es
        #extension GL_EXT_shader_pixel_local_storage : require
				
		layout(location = 0) out lowp vec4 oColorFbo;

		layout(rgba8)  __pixel_local_inEXT FragDataLocal {
            layout(rgba8) highp vec4 unused_Albedo;
            layout(rgba8) highp vec4 unused_Normal; 
            layout(r32f) highp float unused_Depth;
            layout(rgba8) highp vec4 inColor;
        } pls;

		void main() { 
			oColorFbo = pls.inColor;
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]